---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
// import Tag from "@/components/Tag.astro";
// import Datetime from "@/components/Datetime.astro";
// import EditPost from "@/components/EditPost.astro";
// import ShareLinks from "@/components/ShareLinks.astro";
// import BackButton from "@/components/BackButton.astro";
import { getPath } from "@/utils/getPath";
// import { slugifyStr } from "@/utils/slugify";
import { SITE } from "@/config";
import Breadcrumb from "@/components/Breadcrumb.astro";
import IconChevronLeftArrow from "@/components/Icons/IconChevronLeftArrow.astro";
import IconChevronRightArrow from "@/components/Icons/IconChevronRightArrow.astro";
import LinkPage from "@/components/LinkPage.astro";
// import IconDownload from "@/components/Icons/IconDownload.astro";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  metadata_title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title}`,
  metadata_title: `${metadata_title}` || `${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const currentDirPath = getPath(post.id, post.filePath, false, true); //Get directory path of the current post

const allPosts = posts
  .filter(p => {
    const postDirPath = getPath(p.id, p.filePath, false, true);
    // console.log(`    Checking post ${p.id}: path=${postDirPath}, match=${postDirPath === currentDirPath}`); // Uncomment for very verbose logging
    return postDirPath === currentDirPath;
  }) // Filter for posts within the same directory
  .map(({ data: { title }, id, filePath }) => ({ // Include filePath in the map
    slug: id,
    title,
    filePath, // Add filePath here
  }));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.id);
// console.log(`  Current post index in filtered list: ${currentPostIndex}`);

const prevPost = currentPostIndex > 0 ? allPosts[currentPostIndex - 1] : null; // Fix: should be > 0
const nextPost =
  currentPostIndex !== -1 && currentPostIndex < allPosts.length - 1 // Fix: check index validity
    ? allPosts[currentPostIndex + 1]
    : null;

// const allPosts = posts.map(({ data: { title }, id }) => ({
//   slug: id,
//   title,
// }));

// const currentPostIndex = allPosts.findIndex(a => a.slug === post.id);

// const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
// const nextPost =
//   currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <!-- <BackButton /> -->
  <!-- <main
  id="main-content"
  class:list={[
  "mx-auto w-full max-w-3xl px-4 pb-12",
  { "mt-8": !SITE.showBackButton },
  ]}
  data-pagefind-body
  > -->
  <main
  id="main-content"
  class="mx-auto mb-24 w-full max-w-mdsm sm:max-w-lg md:max-w-2xl lg:max-w-3xl px-6 2xs:px-4 xs:px-2 xl:px-0 2xl:max-w-4xl"
  >
    <Breadcrumb />
    <!-- <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1> -->
    <!-- <div class="flex flex-row justify-between items-center"> -->
      <h1 class="inline-block text-2xl font-bold sm:text-3xl">
        {title}
      </h1>
      <!-- <button>
        <IconDownload styleClass="link-interaction-effect" />
      </button> -->
    <!-- </div> -->
    <!-- <div class="flex items-center gap-4">
      <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" class="my-2" />
      <EditPost class="max-sm:hidden" {hideEditPost} {post} />
    </div> -->

    <hr class="line border-[1.25px] my-10 border-solid" />

    <article id="article" class="prose mt-8 w-full max-w-full">
      <Content />
    </article>

    <hr class="line border-[1.25px] my-20 border-solid" />

    <!-- <EditPost class="sm:hidden" {hideEditPost} {post} /> -->

    <!-- <ul class="mt-4 mb-8 sm:my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul> -->

    <!-- <div
      class="flex flex-col items-center justify-between gap-6 sm:flex-row sm:items-end sm:gap-4"
    >
      <ShareLinks />

      <button
        id="back-to-top"
        class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Back to Top</span>
      </button>
    </div> -->

    <!-- <hr class="my-6 border-solid" /> -->

    <div data-pagefind-ignore class="grid grid-cols-1 sm:grid-cols-2 gap-6">
      {
        prevPost && (
          // <a
          //   href={`/posts/${prevPost.slug}`}
          //   class="flex w-full gap-1 hover:opacity-75"
          // >
          <LinkPage href=`${getPath(prevPost.slug, prevPost.filePath, true)}/` class="post-navigation-block justify-start">
            <IconChevronLeftArrow styleClass="inline-block flex-none" />
            <div class="flex flex-col gap-1">
              <span class="text-sm">Prev Post</span>
              <div class="font-semibold text-font-color-green">{prevPost.title}</div>
            </div>
          </LinkPage>
          // <a
          //   href=`${getPath(prevPost.slug, prevPost.filePath, true)}/`
          //   class="post-navigation-block justify-start"
          // >
          //   <IconChevronLeftArrow styleClass="inline-block flex-none" />
          //   <div class="flex flex-col gap-1">
          //     <span class="text-sm">Prev Post</span>
          //     <div class="font-semibold text-font-color-green">{prevPost.title}</div>
          //   </div>
          // </a>
        )
      }
      {
        nextPost && (
          // <a
          //   href={`/posts/${nextPost.slug}`}
          //   class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
          // >
          <LinkPage href=`${getPath(nextPost.slug, nextPost.filePath, true)}/` class="post-navigation-block justify-end text-right sm:col-start-2">
            <div class="flex flex-col gap-1">
              <span class="text-sm">Next Post</span>
              <div class="font-semibold text-font-color-green">{nextPost.title}</div>
            </div>
            <IconChevronRightArrow styleClass="inline-block flex-none" />
          </LinkPage>
          // <a
          //   href=`${getPath(nextPost.slug, nextPost.filePath, true)}/`
          //   class="post-navigation-block justify-end text-right sm:col-start-2"
          // >
          //   <div class="flex flex-col gap-1">
          //     <span class="text-sm">Next Post</span>
          //     <div class="font-semibold text-font-color-green">{nextPost.title}</div>
          //     {/* <div class="font-semibold text-accent/85">{nextPost.title}</div> */}
          //   </div>
          //   <IconChevronRightArrow styleClass="inline-block flex-none" />
          // </a>
        )
      }
    </div>
  </main>
  <Footer />

  <!-- <script src="../scripts/specific/attach-copy-buttons.js"></script> -->
</Layout>
